---
layout: post
title: "笨辦法更簡單"
---

這本小書的目的是讓你起步學習程式。雖然書名說是「笨辦法」，但其實並非如此。所謂的「笨辦法」是指本書教授的方式。在這本書的幫助下，你將通過非常簡單的練習學會一門程式語言。寫練習題是每個程序設計師的必經之路：


1.  做每一道習題
2. 一字不差地寫出每一個程式
3. 讓程式運行起來

1. Go through each exercise.
2. Type in each sample exactly.
3. Make it run.

就是這樣了。剛開始這對你來說會*非常*難，但你需要堅持下去。如果你通讀了這本書，每晚花個一兩小時做做習題，你可以為自己讀下一本程式書籍打下良好的基礎。通過這本書你學到的可能不是真正的「寫程式」，但你會學到最基本的學習方法。

這本書的目的是教會你程式新手所需的三種最重要的技能：「讀和寫」、「注重細節」、「發現不同」。



## 讀和寫



It seems stupidly obvious, but, if you have a problem typing, you will have a problem learning to code. Especially if you have a problem typing the fairly odd characters in source code. Without this simple skill you will be unable to learn even the most basic things about how software works.

Typing the code samples and getting them to run will help you learn the names of the symbols, get familiar with typing them, and get you reading the language.

## Attention to Detail

區分好程序員和差程式設計師的最重要的一個技能就是對於細節的注重程度。事實上這是任何行業區分好壞的標準。如果缺乏對於工作的每一個微小細節的注意，你的工作成果將缺乏重要的元素。以寫程式來講，這樣你得到的結果只能是毛病多多難以使用的軟體。

By going through this book, and copying each example *exactly*, you will be training your brain to focus on the details of what you are doing, as you are doing it.

## Spotting Differences
A very important skill -- that most programmers develop over time -- is the ability to visually notice differences between things. An experienced programmer can take two pieces of code that are slightly different and immediately start pointing out the differences. Programmers have invented tools to make this even easier, but we won't be using any of these. You first have to train your brain the hard way, then you can use the tools.

While you do these exercises, typing each one in, you will be making mistakes. It's inevitable; even seasoned programmers would make a few. Your job is to compare what you have written to what's required, and fix all the differences. By doing so, you will train yourself to notice mistakes, bugs, and other problems.

## Do Not Copy-Paste
You must *type* each of these exercises in, manually. If you copy and paste, you might as well just not even do them. The point of these exercises is to train your hands, your brain, and your mind in how to read, write, and see code. If you copy-paste, you are cheating yourself out of the effectiveness of the lessons.

## A Note On Practice And Persistence
While you are studying programming, I'm studying how to play guitar. I practice it every day for at least 2 hours a day. I play scales, chords, and arpeggios for an hour at least and then learn music theory, ear training, songs and anything else I can. Some days I study guitar and music for 8 hours because I feel like it and it's fun. To me repetitive practice is natural and just how to learn something. I know that to get good at anything you have to practice every day, even if I suck that day (which is often) or it's difficult. Keep trying and eventually it'll be easier and fun.

As you study this book, and continue with programming, remember that anything worth doing is difficult at first. Maybe you are the kind of person who is afraid of failure so you give up at the first sign of difficulty. Maybe you never learned self-discipline so you can't do anything that's "boring". Maybe you were told that you are "gifted" so you never attempt anything that might make you seem stupid or not a prodigy. Maybe you are competitive and unfairly compare yourself to someone like me who's been programming for 20+ years.

Whatever your reason for wanting to quit, keep at it. Force yourself. If you run into an Extra Credit you can't do, or a lesson you just do not understand, then skip it and come back to it later. Just keep going because with programming there's this very odd thing that happens.

At first, you will not understand anything. It'll be weird, just like with learning any human language. You will struggle with words, and not know what symbols are what, and it'll all be very confusing. Then one day *BANG* your brain will snap and you will suddenly "get it". If you keep doing the exercises and keep trying to understand them, you will get it. You might not be a master coder, but you will at least understand how programming works.

If you give up, you won't ever reach this point. You will hit the first confusing thing (which is everything at first) and then stop. If you keep trying, keep typing it in, trying to understand it and reading about it, you will eventually get it.

But, if you go through this whole book, and you still do not understand how to code, at least you gave it a shot. You can say you tried your best and a little more and it didn't work out, but at least you tried. You can be proud of that.

## License
This book is Copyright (C) 2011 by Zed A. Shaw. You are free to distribute this book to anyone you want, so long as you do *not* charge anything for it, *and* it is not altered. You must give away the book in its entirety, or not at all. This means it's alright for you to teach a class using the book, so long as you aren't charging students for the *book* and you give them the whole book unmodified.

## Special Thanks
I'd like to thank a few people who helped with this edition of the book. First is my editor at *Pretty Girl Editing Services* who helped me edit the book and is just lovely all by herself. Then there's *Greg Newman*, who did the cover jacket and artwork, plus reviewed copies of the book. His artwork made the book look like a real book, and didn't mind that I totally forgot to give him credit in the first edition. I'd also like to thank *Brian Shumate* for doing the website landing page and other site design help, which I need a lot of help on.

Finally, I'd like to thank the hundreds of thousands of people who read the first edition and especially the ones who submitted bug reports and comments to improve the book. It really made this edition solid and I couldn't have done it without all of you. Thank you.
